"""
Django settings for cmp_storage project.

Generated by 'django-admin startproject' using Django 3.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-i4r1*n^3b7as0*$@b(jq5q-&dny0&p76eg@7wbny9cs&$s^x-h'

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = bool(int(os.getenv('DEBUG', 1)))

ALLOWED_HOSTS = ['*']
APPEND_SLASH = False

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'drf_yasg',
    'cmp_storage',
    'onefs',
    'rest_framework',
]

REST_FRAMEWORK = {
    'DATE_FORMAT': '%Y-%m-%d',
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'DEFAULT_PAGINATION_CLASS': 'cmp_storage.pagination.PageNumberPagination',
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'NON_FIELD_ERRORS_KEY': 'all',
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cmp_storage.urls'
HEALTH_CHECK_PATH = os.getenv('HEALTH_CHECK_PATH', '/health')
URL = os.getenv("URL", "127.0.0.1:8080")
WEB_PORT = os.getenv("WEB_PORT", 8080)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cmp_storage.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'cmp_storage'),
        'USER': os.getenv('DB_USER', 'cmp_storage'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'cmp_storage'),
        # 'PASSWORD': os.getenv('DB_PASSWORD', '4da5fe522058ca244f93257c452f9e9ce27482ab'),
        # 'HOST': os.getenv('DB_HOST', '10.208.0.46'),
        'HOST': os.getenv('DB_HOST', '10.208.224.79'),
        'PORT': int(os.getenv('DB_PORT', 5432)),
        'CONN_MAX_AGE': 3
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = False

USE_TZ = True

DATETIME_FORMAT = 'Y-m-d H:i:s'

DATE_FORMAT = 'Y-m-d'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

OS_PROJECT_DOMAIN_NAME = os.getenv('OS_PROJECT_DOMAIN_NAME', 'Default')
OS_USER_DOMAIN_NAME = os.getenv('OS_USER_DOMAIN_NAME', 'Default')
OS_PROJECT_NAME = os.getenv('OS_PROJECT_NAME', 'admin')
OS_TENANT_NAME = os.getenv('OS_TENANT_NAME', 'admin')
OS_USERNAME = os.getenv('OS_USERNAME', 'admin')
# OS_PASSWORD = os.getenv('OS_PASSWORD', 'yXGeJqaCJ1fR5oblHTXxR1cBOe7BAd1Krax5wmj0')
OS_PASSWORD = os.getenv('OS_PASSWORD', 'NY4E6Tz6SfuKBztPppBik1GXTqY7m3M3FDpsL2nK')
OS_AUTH_URL = os.getenv('OS_AUTH_URL', 'http://10.209.0.10:35357/v3')
# OS_AUTH_URL = os.getenv('OS_AUTH_URL', 'http://10.208.0.10:35357/v3')
OS_INTERFACE = os.getenv('OS_INTERFACE', 'internal')
OS_ENDPOINT_TYPE = os.getenv('OS_ENDPOINT_TYPE', 'internalURL')
OS_IDENTITY_API_VERSION = int(os.getenv('OS_IDENTITY_API_VERSION', '3'))
OS_REGION_NAME = os.getenv('OS_REGION_NAME', 'test')
OS_AUTH_PLUGIN = os.getenv('OS_AUTH_PLUGIN', 'password')
OS_REGION_MAWEI = os.getenv('OS_REGION_MAWEI', 'test')

OS_TOKEN_KEY = os.getenv('OPENSTACK_TOKEN_KEY', 'x-auth-token')
IS_PLATFORM = os.getenv('IS_PLATFORM', 'IS_PLATFORM')
PROJECTID = os.getenv('PROJECTID', 'PROJECTID')
REGION = os.getenv('REGION', 'REGION')

ONEFS_URL = os.getenv('ONEFS_URL', 'https://10.1.51.203:8080/')
ONEFS_USER = os.getenv('ONEFS_USER', 'admin')
ONEFS_PASSWORD = os.getenv('ONEFS_PASSWORD', 'admin')
NFS_ROOT = os.getenv('NEF_ROOT', '/ifs/')
NFS_IP = os.getenv('NFS_IP', 'nasfz.yonghui.cn')


SWAGGER = bool(int(os.getenv('SWAGGER', 1)))

if SWAGGER:
    SWAGGER_SETTINGS = {
        'LOGOUT_URL': '/admin/login/',
        'SECURITY_DEFINITIONS': {
            OS_TOKEN_KEY: {
                'type': 'apiKey',
                'name': OS_TOKEN_KEY.lower(),
                'in': 'header'
            },
            IS_PLATFORM: {
                'type': 'apiKey',
                'name': IS_PLATFORM.lower(),
                'in': 'header'
            },
            PROJECTID: {
                'type': 'apiKey',
                'name': PROJECTID.lower(),
                'in': 'header'
            },
            REGION: {
                'type': 'apiKey',
                'name': REGION.lower(),
                'in': 'header'
            }
        },
    }
